/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: generation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class FirstMessageGenerationRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        userData?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("userData" in data && data.userData != undefined) {
                this.userData = data.userData;
            }
        }
    }
    get userData() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set userData(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        userData?: string;
    }): FirstMessageGenerationRequest {
        const message = new FirstMessageGenerationRequest({});
        if (data.userData != null) {
            message.userData = data.userData;
        }
        return message;
    }
    toObject() {
        const data: {
            userData?: string;
        } = {};
        if (this.userData != null) {
            data.userData = this.userData;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.userData.length)
            writer.writeString(1, this.userData);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FirstMessageGenerationRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FirstMessageGenerationRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.userData = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FirstMessageGenerationRequest {
        return FirstMessageGenerationRequest.deserialize(bytes);
    }
}
export class MessageGenerationResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        text?: string;
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        text?: string;
        id?: string;
    }): MessageGenerationResult {
        const message = new MessageGenerationResult({});
        if (data.text != null) {
            message.text = data.text;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            text?: string;
            id?: string;
        } = {};
        if (this.text != null) {
            data.text = this.text;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.text.length)
            writer.writeString(1, this.text);
        if (this.id.length)
            writer.writeString(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageGenerationResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageGenerationResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.text = reader.readString();
                    break;
                case 2:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MessageGenerationResult {
        return MessageGenerationResult.deserialize(bytes);
    }
}
export class InputEvaluationRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        text?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
        }
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        text?: string;
    }): InputEvaluationRequest {
        const message = new InputEvaluationRequest({});
        if (data.text != null) {
            message.text = data.text;
        }
        return message;
    }
    toObject() {
        const data: {
            text?: string;
        } = {};
        if (this.text != null) {
            data.text = this.text;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.text.length)
            writer.writeString(1, this.text);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InputEvaluationRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InputEvaluationRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.text = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InputEvaluationRequest {
        return InputEvaluationRequest.deserialize(bytes);
    }
}
export class Evaluation extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        comment?: string;
        rating?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("comment" in data && data.comment != undefined) {
                this.comment = data.comment;
            }
            if ("rating" in data && data.rating != undefined) {
                this.rating = data.rating;
            }
        }
    }
    get comment() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set comment(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get rating() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set rating(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        comment?: string;
        rating?: number;
    }): Evaluation {
        const message = new Evaluation({});
        if (data.comment != null) {
            message.comment = data.comment;
        }
        if (data.rating != null) {
            message.rating = data.rating;
        }
        return message;
    }
    toObject() {
        const data: {
            comment?: string;
            rating?: number;
        } = {};
        if (this.comment != null) {
            data.comment = this.comment;
        }
        if (this.rating != null) {
            data.rating = this.rating;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.comment.length)
            writer.writeString(1, this.comment);
        if (this.rating != 0)
            writer.writeUint32(2, this.rating);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Evaluation {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Evaluation();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.comment = reader.readString();
                    break;
                case 2:
                    message.rating = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Evaluation {
        return Evaluation.deserialize(bytes);
    }
}
export class ResponseGenerationRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        text?: string;
        previousId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
            if ("previousId" in data && data.previousId != undefined) {
                this.previousId = data.previousId;
            }
        }
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get previousId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set previousId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        text?: string;
        previousId?: string;
    }): ResponseGenerationRequest {
        const message = new ResponseGenerationRequest({});
        if (data.text != null) {
            message.text = data.text;
        }
        if (data.previousId != null) {
            message.previousId = data.previousId;
        }
        return message;
    }
    toObject() {
        const data: {
            text?: string;
            previousId?: string;
        } = {};
        if (this.text != null) {
            data.text = this.text;
        }
        if (this.previousId != null) {
            data.previousId = this.previousId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.text.length)
            writer.writeString(1, this.text);
        if (this.previousId.length)
            writer.writeString(2, this.previousId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseGenerationRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseGenerationRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.text = reader.readString();
                    break;
                case 2:
                    message.previousId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ResponseGenerationRequest {
        return ResponseGenerationRequest.deserialize(bytes);
    }
}
export class OutputEvaluationRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: string;
    }): OutputEvaluationRequest {
        const message = new OutputEvaluationRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OutputEvaluationRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OutputEvaluationRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OutputEvaluationRequest {
        return OutputEvaluationRequest.deserialize(bytes);
    }
}
