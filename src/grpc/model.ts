/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: model.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./prompts";
import * as pb_1 from "google-protobuf";
export class ModelData extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          name?: string;
          agent?: dependency_1.AgentType;
        },
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls,
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("name" in data && data.name != undefined) {
        this.name = data.name;
      }
      if ("agent" in data && data.agent != undefined) {
        this.agent = data.agent;
      }
    }
  }
  get name() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set name(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get agent() {
    return pb_1.Message.getFieldWithDefault(
      this,
      2,
      dependency_1.AgentType.Analyzer,
    ) as dependency_1.AgentType;
  }
  set agent(value: dependency_1.AgentType) {
    pb_1.Message.setField(this, 2, value);
  }
  static fromObject(data: {
    name?: string;
    agent?: dependency_1.AgentType;
  }): ModelData {
    const message = new ModelData({});
    if (data.name != null) {
      message.name = data.name;
    }
    if (data.agent != null) {
      message.agent = data.agent;
    }
    return message;
  }
  toObject() {
    const data: {
      name?: string;
      agent?: dependency_1.AgentType;
    } = {};
    if (this.name != null) {
      data.name = this.name;
    }
    if (this.agent != null) {
      data.agent = this.agent;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.name.length) writer.writeString(1, this.name);
    if (this.agent != dependency_1.AgentType.Analyzer)
      writer.writeEnum(2, this.agent);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModelData {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new ModelData();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.name = reader.readString();
          break;
        case 2:
          message.agent = reader.readEnum();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): ModelData {
    return ModelData.deserialize(bytes);
  }
}
