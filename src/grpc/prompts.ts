/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: prompts.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum AgentType {
  Analyzer = 0,
  Writer = 1,
  Evaluator = 2,
}
export class Prompt extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          prompt?: string;
          agent?: AgentType;
        },
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls,
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("prompt" in data && data.prompt != undefined) {
        this.prompt = data.prompt;
      }
      if ("agent" in data && data.agent != undefined) {
        this.agent = data.agent;
      }
    }
  }
  get prompt() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set prompt(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get agent() {
    return pb_1.Message.getFieldWithDefault(
      this,
      2,
      AgentType.Analyzer,
    ) as AgentType;
  }
  set agent(value: AgentType) {
    pb_1.Message.setField(this, 2, value);
  }
  static fromObject(data: { prompt?: string; agent?: AgentType }): Prompt {
    const message = new Prompt({});
    if (data.prompt != null) {
      message.prompt = data.prompt;
    }
    if (data.agent != null) {
      message.agent = data.agent;
    }
    return message;
  }
  toObject() {
    const data: {
      prompt?: string;
      agent?: AgentType;
    } = {};
    if (this.prompt != null) {
      data.prompt = this.prompt;
    }
    if (this.agent != null) {
      data.agent = this.agent;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.prompt.length) writer.writeString(1, this.prompt);
    if (this.agent != AgentType.Analyzer) writer.writeEnum(2, this.agent);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Prompt {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new Prompt();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.prompt = reader.readString();
          break;
        case 2:
          message.agent = reader.readEnum();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): Prompt {
    return Prompt.deserialize(bytes);
  }
}
export class Agent extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          agent?: AgentType;
        },
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls,
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("agent" in data && data.agent != undefined) {
        this.agent = data.agent;
      }
    }
  }
  get agent() {
    return pb_1.Message.getFieldWithDefault(
      this,
      1,
      AgentType.Analyzer,
    ) as AgentType;
  }
  set agent(value: AgentType) {
    pb_1.Message.setField(this, 1, value);
  }
  static fromObject(data: { agent?: AgentType }): Agent {
    const message = new Agent({});
    if (data.agent != null) {
      message.agent = data.agent;
    }
    return message;
  }
  toObject() {
    const data: {
      agent?: AgentType;
    } = {};
    if (this.agent != null) {
      data.agent = this.agent;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.agent != AgentType.Analyzer) writer.writeEnum(1, this.agent);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Agent {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new Agent();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.agent = reader.readEnum();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): Agent {
    return Agent.deserialize(bytes);
  }
}
