/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ai.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./shared";
import * as dependency_2 from "./configuration";
import * as dependency_3 from "./files";
import * as dependency_4 from "./generation";
import * as grpc_1 from "@grpc/grpc-js";
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedAIService {
    static definition = {
        generateFirstMessage: {
            path: "/AI/generateFirstMessage",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_4.FirstMessageGenerationRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_4.FirstMessageGenerationRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_4.MessageGenerationResult) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_4.MessageGenerationResult.deserialize(new Uint8Array(bytes))
        },
        evaluateInput: {
            path: "/AI/evaluateInput",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_4.InputEvaluationRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_4.InputEvaluationRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_4.Evaluation) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_4.Evaluation.deserialize(new Uint8Array(bytes))
        },
        generateResponse: {
            path: "/AI/generateResponse",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_4.ResponseGenerationRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_4.ResponseGenerationRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_4.MessageGenerationResult) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_4.MessageGenerationResult.deserialize(new Uint8Array(bytes))
        },
        evaluateOutput: {
            path: "/AI/evaluateOutput",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_4.OutputEvaluationRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_4.OutputEvaluationRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_4.Evaluation) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_4.Evaluation.deserialize(new Uint8Array(bytes))
        },
        regenerateResponse: {
            path: "/AI/regenerateResponse",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_4.ResponseGenerationRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_4.ResponseGenerationRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_4.MessageGenerationResult) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_4.MessageGenerationResult.deserialize(new Uint8Array(bytes))
        },
        getFiles: {
            path: "/AI/getFiles",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.Empty) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.Empty.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_3.FilesList) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_3.FilesList.deserialize(new Uint8Array(bytes))
        },
        addFile: {
            path: "/AI/addFile",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_3.FileUploadRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_3.FileUploadRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.Empty) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.Empty.deserialize(new Uint8Array(bytes))
        },
        deleteFile: {
            path: "/AI/deleteFile",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_3.FileName) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_3.FileName.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.Empty) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.Empty.deserialize(new Uint8Array(bytes))
        },
        getPrompt: {
            path: "/AI/getPrompt",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.Empty) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.Empty.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_2.Prompt) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_2.Prompt.deserialize(new Uint8Array(bytes))
        },
        editPrompt: {
            path: "/AI/editPrompt",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.Prompt) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.Prompt.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.Empty) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.Empty.deserialize(new Uint8Array(bytes))
        },
        getModel: {
            path: "/AI/getModel",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.Empty) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.Empty.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_2.Model) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_2.Model.deserialize(new Uint8Array(bytes))
        },
        editModel: {
            path: "/AI/editModel",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_2.Model) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.Model.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.Empty) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.Empty.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract generateFirstMessage(call: grpc_1.ServerUnaryCall<dependency_4.FirstMessageGenerationRequest, dependency_4.MessageGenerationResult>, callback: grpc_1.sendUnaryData<dependency_4.MessageGenerationResult>): void;
    abstract evaluateInput(call: grpc_1.ServerUnaryCall<dependency_4.InputEvaluationRequest, dependency_4.Evaluation>, callback: grpc_1.sendUnaryData<dependency_4.Evaluation>): void;
    abstract generateResponse(call: grpc_1.ServerUnaryCall<dependency_4.ResponseGenerationRequest, dependency_4.MessageGenerationResult>, callback: grpc_1.sendUnaryData<dependency_4.MessageGenerationResult>): void;
    abstract evaluateOutput(call: grpc_1.ServerUnaryCall<dependency_4.OutputEvaluationRequest, dependency_4.Evaluation>, callback: grpc_1.sendUnaryData<dependency_4.Evaluation>): void;
    abstract regenerateResponse(call: grpc_1.ServerUnaryCall<dependency_4.ResponseGenerationRequest, dependency_4.MessageGenerationResult>, callback: grpc_1.sendUnaryData<dependency_4.MessageGenerationResult>): void;
    abstract getFiles(call: grpc_1.ServerUnaryCall<dependency_1.Empty, dependency_3.FilesList>, callback: grpc_1.sendUnaryData<dependency_3.FilesList>): void;
    abstract addFile(call: grpc_1.ServerUnaryCall<dependency_3.FileUploadRequest, dependency_1.Empty>, callback: grpc_1.sendUnaryData<dependency_1.Empty>): void;
    abstract deleteFile(call: grpc_1.ServerUnaryCall<dependency_3.FileName, dependency_1.Empty>, callback: grpc_1.sendUnaryData<dependency_1.Empty>): void;
    abstract getPrompt(call: grpc_1.ServerUnaryCall<dependency_1.Empty, dependency_2.Prompt>, callback: grpc_1.sendUnaryData<dependency_2.Prompt>): void;
    abstract editPrompt(call: grpc_1.ServerUnaryCall<dependency_2.Prompt, dependency_1.Empty>, callback: grpc_1.sendUnaryData<dependency_1.Empty>): void;
    abstract getModel(call: grpc_1.ServerUnaryCall<dependency_1.Empty, dependency_2.Model>, callback: grpc_1.sendUnaryData<dependency_2.Model>): void;
    abstract editModel(call: grpc_1.ServerUnaryCall<dependency_2.Model, dependency_1.Empty>, callback: grpc_1.sendUnaryData<dependency_1.Empty>): void;
}
export class AIClient extends grpc_1.makeGenericClientConstructor(UnimplementedAIService.definition, "AI", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    generateFirstMessage: GrpcPromiseServiceInterface<dependency_4.FirstMessageGenerationRequest, dependency_4.MessageGenerationResult> = (message: dependency_4.FirstMessageGenerationRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.MessageGenerationResult> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.generateFirstMessage(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.MessageGenerationResult) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    evaluateInput: GrpcPromiseServiceInterface<dependency_4.InputEvaluationRequest, dependency_4.Evaluation> = (message: dependency_4.InputEvaluationRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.Evaluation> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.evaluateInput(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.Evaluation) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    generateResponse: GrpcPromiseServiceInterface<dependency_4.ResponseGenerationRequest, dependency_4.MessageGenerationResult> = (message: dependency_4.ResponseGenerationRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.MessageGenerationResult> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.generateResponse(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.MessageGenerationResult) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    evaluateOutput: GrpcPromiseServiceInterface<dependency_4.OutputEvaluationRequest, dependency_4.Evaluation> = (message: dependency_4.OutputEvaluationRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.Evaluation> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.evaluateOutput(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.Evaluation) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    regenerateResponse: GrpcPromiseServiceInterface<dependency_4.ResponseGenerationRequest, dependency_4.MessageGenerationResult> = (message: dependency_4.ResponseGenerationRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.MessageGenerationResult> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.regenerateResponse(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.MessageGenerationResult) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getFiles: GrpcPromiseServiceInterface<dependency_1.Empty, dependency_3.FilesList> = (message: dependency_1.Empty, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.FilesList> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getFiles(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.FilesList) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    addFile: GrpcPromiseServiceInterface<dependency_3.FileUploadRequest, dependency_1.Empty> = (message: dependency_3.FileUploadRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.Empty> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.addFile(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.Empty) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    deleteFile: GrpcPromiseServiceInterface<dependency_3.FileName, dependency_1.Empty> = (message: dependency_3.FileName, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.Empty> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.deleteFile(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.Empty) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getPrompt: GrpcPromiseServiceInterface<dependency_1.Empty, dependency_2.Prompt> = (message: dependency_1.Empty, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_2.Prompt> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getPrompt(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_2.Prompt) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    editPrompt: GrpcPromiseServiceInterface<dependency_2.Prompt, dependency_1.Empty> = (message: dependency_2.Prompt, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.Empty> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.editPrompt(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.Empty) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    getModel: GrpcPromiseServiceInterface<dependency_1.Empty, dependency_2.Model> = (message: dependency_1.Empty, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_2.Model> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.getModel(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_2.Model) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    editModel: GrpcPromiseServiceInterface<dependency_2.Model, dependency_1.Empty> = (message: dependency_2.Model, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.Empty> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.editModel(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.Empty) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
